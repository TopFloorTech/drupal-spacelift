<?php

/**
 * @file
 * Functions to support theming in the MSI theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements template_preprocess_page.
 */
function {{starter}}_preprocess_page(array &$variables) {
  $site_name = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['linked_site_name'] = [
    '#type' => 'link',
    '#title' => $site_name,
    '#url' => Url::fromRoute('<front>'),
  ];
}

/**
 * Implements template_preprocess_paragraph.
 */
function {{starter}}_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraphType = $paragraph->bundle();
  $variables['paragraph_id'] = $paragraph->id();

  switch ($paragraphType) {
    case 'heading':
      // Convert the heading level value into just the number.
      $heading_level = $paragraph->get('field_heading_level')->value;
      $variables['heading_level'] = substr($heading_level, 1);
      $parent = $paragraph->getParentEntity();

      if ($parent && $parent->bundle() == 'industry') {
        $variables['header_add_wrapper'] = TRUE;
      }

      break;

    case 'content_listing':
      $layout_direction = $paragraph->get('field_layout_direction')->value;
      $variables['layout_direction'] = $layout_direction;
      $variables['header_grid_classes'] = ['small-12'];
      $variables['body_grid_classes'] = ['small-12'];
      $variables['header_flex_direction'] = 'row';

      if ($layout_direction === 'horizontal') {
        $variables['header_grid_classes'] = ['medium-5', 'large-4'];
        $variables['body_grid_classes'] = ['medium-7', 'large-8'];
        $variables['header_flex_direction'] = 'column';
      }

      break;

    case 'article_publish_date':
      /** @var \Drupal\node\NodeInterface $node */
      $node = Drupal::request()->attributes->get('node');

      if ($node->hasField('field_publish_date')) {
        $variables['publish_date'] = $node->get('field_publish_date')->value;
      }
      break;

    default:
      break;
  }

  // TODO: See why this is needed
  if ($paragraph->hasField('field_article_type') && !empty($paragraph->get('field_article_type'))) {
    $field_article_type = $paragraph->get('field_article_type')->value;
    $variables['article_type'] = $field_article_type;
  }

  if ($paragraph->hasField('field_theme') && !empty($paragraph->get('field_theme'))) {
    $theme_utility_classes = [
      'white' => '',
      'blue' => 'bg-blue',
      'gray' => 'bg-light',
    ];

    $theme_key = $paragraph->get('field_theme')->value;
    $variables['theme_class'] = $theme_utility_classes[$theme_key];
  }

  if ($paragraph->hasField('field_block_color') && !empty($paragraph->get('field_block_color'))) {
    $theme_utility_classes = [
      'white' => 'boxes-white',
      'gray' => 'boxes-light',
    ];

    $theme_key = $paragraph->get('field_block_color')->value;
    $variables['theme_blocks_class'] = $theme_utility_classes[$theme_key];
  }

  if ($paragraph->hasField('field_link_to') && !empty($paragraph->get('field_link_to'))) {
    $theme_key = $paragraph->get('field_link_to')->value;
    $variables['theme_link_type'] = $theme_key;
  }
}

/**
 * Implements hook_theme_suggestions_taxonomy_term_alter().
 */
function {{starter}}_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $sanitized_view_mode;
}

/**
 * Implements theme_preprocess_region().
 */
function {{starter}}_preprocess_region(array &$variables) {
  foreach ($variables['elements'] as $block_name => $block) {
    if ($block_name[0] !== '#') {
      $variables['blocks'][$block_name] = $block;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function {{starter}}_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $form_id = $variables['element']['#id'];

  switch($form_id) {
    case 'views-exposed-form-search-block-search-results':
      $suggestions[] = 'form__search_block_form';
      break;

    default:
      break;
  }
}

/**
 * Implements template_preprocess_views_exposed_form()
 */
function {{starter}}_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form['#id']) {
    case 'views-exposed-form-search-block-search-results':
      $form['search']['#attributes']['class'][] = 'SearchForm-input';
      $form['actions']['#attributes']['class'][] = 'FormWrapper-noPadding';
      $form['actions']['submit']['#attributes']['class'][] = 'SearchForm-icon';
      $form['actions']['submit']['#value'] = '';
      break;
  }
}
